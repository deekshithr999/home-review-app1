# services:
#   mysql:
#     image: mysql:8.4
#     container_name: mysql
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: rootpass
#       MYSQL_DATABASE: home_reviews
#     volumes:
#       - mysql-data:/var/lib/mysql
#     networks:
#       - app-network

#   flask-backend:
#     build: ./backend
#     container_name: flask-backend
#     restart: always
#     depends_on:
#       - mysql
#     environment:
#       MYSQL_USER: root
#       MYSQL_PASSWORD: rootpass
#       MYSQL_DB: home_reviews
#       MYSQL_HOST: mysql
#     networks:
#       - app-network

#   react-frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     container_name: react-frontend
#     depends_on:
#       - backend
#     command: ["true"]  # Prevent container from staying up â€” we only build
#     networks:
#       - app-network

#   nginx:
#     image: nginx:stable-alpine
#     container_name: nginx
#     restart: always
#     depends_on:
#       - frontend
#       - backend
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#       - ./nginx/html:/usr/share/nginx/html:ro
#     networks:
#       - app-network

# volumes:
#   mysql-data:

# networks:
#   app-network:


# services:
#   flask-backend:
#     build: ./backend
#     container_name: flask-backend
#     ports:
#       - "5000:5000"

#   react-frontend:
#     build: ./frontend
#     container_name: react-frontend
#     ports:
#       - "3001:80"  # Mapping external port 3001 to internal port 80

#   nginx:
#     build: ./nginx
#     container_name: nginx
#     ports:
#       - "8080:80"
#     depends_on:
#       - flask-backend
#       - react-frontend

version: '3.8'

# services:
#   flask-backend:
#     build: ./backend
#     container_name: flask-backend
#     volumes:
#       - ./backend/app/uploads:/app/app/uploads  # Persist uploads
#       - ./db-data:/app/instance  # For SQLite
#     environment:
#       - FLASK_ENV=production
#     expose:
#       - "5000"  # Only accessible within Docker network

#   react-frontend:
#     build: ./frontend
#     container_name: react-frontend
#     # No ports needed (accessed via Nginx)

#   nginx:
#     build: ./nginx
#     container_name: nginx
#     ports:
#       - "8080:80"  # Only exposed port
#     volumes:
#       - ./frontend/build:/usr/share/nginx/html  # React static files
#       - ./backend/app/uploads:/app/uploads  # Shared upload folder
#     depends_on:
#       - flask-backend
#       - react-frontend



services:
  flask-backend:
    build: ./backend
    volumes:
      - ./backend/app/uploads:/app/app/uploads
    environment:
      - FLASK_ENV=production
    networks:
      - app-network

  nginx:
    build: 
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./backend/app/uploads:/app/uploads
    depends_on:
      - flask-backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge